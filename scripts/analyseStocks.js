/**
 * Analysze stock
 * 
 * Pass in the name of the stock symbol file.
 * 
 * 
 */

"use strict";

String.prototype.format = String.prototype.f = function () {
    var s = this,
        i = arguments.length;

    while (i--) {
        s = s.replace(new RegExp('\\{' + i + '\\}', 'gm'), arguments[i]);
    }
    return s;
};


function csvToArray(csvString) {
    // The array we're going to build
    var csvArray = [];
    // Break it into rows to start
    var csvRows = csvString.split(/\n/);
    // Take off the first line to get the headers, then split that into an array
    var csvHeaders = csvRows.shift().split(',');

    // Loop through remaining rows
    for (var rowIndex = 0; rowIndex < csvRows.length; ++rowIndex) {
        var rowArray = csvRows[rowIndex].split(',');

        // Create a new row object to store our data.
        var rowObject = csvArray[rowIndex] = {};

        // Then iterate through the remaining properties and use the headers as keys
        for (var propIndex = 0; propIndex < rowArray.length; ++propIndex) {
            // Grab the value from the row array we're looping through...
            var propValue = rowArray[propIndex].replace(/^"|"$/g, '');
            // ...also grab the relevant header (the RegExp in both of these removes quotes)
            var propLabel = csvHeaders[propIndex].replace(/^"|"$/g, '');;

            rowObject[propLabel] = propValue;
        }
    }
    return csvArray;
}

var system = require('system'),
    webPage = require('webpage'),
    timestamp;

var fs = require('fs');

var stockSymbolFileName = '';
if (system.args.length === 1) {
    console.log('Pass in the name of the stock symbol file generated by getStockSymbols.js');
    phantom.exit(1);
} else {
    timestamp = Date.now();
    stockSymbolFileName = system.args[1];
    var exchangeName = stockSymbolFileName.split('.')[0];
    console.log('Getting stock symbols for [' + exchangeName + ']');

    // Read the file
    try {
        var content = fs.read(stockSymbolFileName);
        var stocks = JSON.parse(content);

        // Create a folder named after the exchange name
        if (!fs.exists(exchangeName) || (fs.exists(exchangeName) && !fs.isDirectory(exchangeName))) {
            if (fs.makeDirectory(exchangeName)) {
                console.log('Created the folder [' + exchangeName + ']');
            } else {
                console.log('Unable to create folder [' + exchangeName + ']');
            }
        } else {
            console.log('Folder [' + exchangeName + '] already exists');
        }

        if (Array.isArray(stocks)) {
            var counter = 0;
            for (counter = 0; counter < stocks.length; counter++){
                var stock = stocks[counter];
                console.log('Processing [' + stock.symbol + ']');
                var fileName = exchangeName + fs.separator + stock.symbol + ".csv";
                if (fs.exists(fileName)) {
                    var content = fs.read(fileName);
                    var histories = csvToArray(content);
                    //console.log(JSON.stringify(histories));
                    console.log(histories[0].Date);
                } else {
                    console.log(fileName + ' does not exist');
                }
            }            
            phantom.exit();
        } else {
            phantom.exit(1);
        }
    } catch (e) {
        console.log('Unable to get stock history.');
        console.log(e.message);
        phantom.exit(1);
    }
}

